# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy full-stack (React + PHP) app to Azure Web App - medconnect

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      # ---------- Build React ----------
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Build React app
        working-directory: frontend/medical-app
        run: |
          set -e
          npm ci
          npm run build
          test -f dist/index.html

      # ---------- Prepare webroot (becomes /home/site/wwwroot) ----------
      - name: Stage webroot
        run: |
          set -e
          WEBROOT="release/wwwroot"
          mkdir -p "$WEBROOT"

          # 1) React build output -> webroot
          cp -r frontend/medical-app/dist/* "$WEBROOT/"

          # 2) Copy ALL backend files
          if [ -d backend/public ]; then
            # Copy all API directories
            [ -d backend/public/api ] && cp -R backend/public/api "$WEBROOT/" || true
            [ -d backend/public/admin_api ] && cp -R backend/public/admin_api "$WEBROOT/" || true
            [ -d backend/public/doctor_api ] && cp -R backend/public/doctor_api "$WEBROOT/" || true
            
            # Copy patient_api.php and other root PHP files
            find backend/public -maxdepth 1 -name "*.php" -exec cp {} "$WEBROOT/" \;
            
            # Copy helpers
            [ -f backend/public/helpers.php ] && cp backend/public/helpers.php "$WEBROOT/" || true
            
            # Copy assets if they exist
            [ -d backend/public/assets ] && cp -R backend/public/assets "$WEBROOT/" || true
          fi

          # Copy database.php and cors.php from backend root if they exist
          [ -f backend/database.php ] && cp backend/database.php "$WEBROOT/" || true
          [ -f backend/cors.php ] && cp backend/cors.php "$WEBROOT/" || true

          # 3) NGINX config + startup script
          mkdir -p "$WEBROOT/nginx"
          cp backend/nginx/nginx.conf "$WEBROOT/nginx/nginx.conf"
          cp backend/nginx/startup.sh "$WEBROOT/nginx/startup.sh"
          chmod 644 "$WEBROOT/nginx/nginx.conf"
          chmod 755 "$WEBROOT/nginx/startup.sh"

          # Optional: include your friendly 404 page if you have it
          [ -d backend/errors ] && { mkdir -p "$WEBROOT/errors"; cp -R backend/errors/. "$WEBROOT/errors/"; } || true

          # Remove Azure splash if present
          rm -f "$WEBROOT/hostingstart.html" 2>/dev/null || true

          echo "---- Staged webroot ----"
          ls -la "$WEBROOT"
          echo "---- API directories ----"
          ls -la "$WEBROOT/" | grep api || echo "No API directories found"

      # ---------- (Optional) Composer ----------
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: 'composer.json'

      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress


      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: webroot
          path: webroot

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_863533AA3E89421F833D1D65476770C8 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_DFF72AB643B14A0D92FBC1F7162341ED }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_9D7A029083A240BFBB8C15F95635A8B0 }}

      - name: Deploy app code to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'medconnect'
          slot-name: 'Production'
          package: webroot

      # ---------- Post-deploy: Apply NGINX config & startup command ----------
      - name: Configure NGINX on App Service
        working-directory: webroot
        run: |
          # Push NGINX configuration files
          az webapp deploy \
            -g 3380_Resources -n medconnect \
            --type static \
            --src-path nginx/nginx.conf \
            --target-path nginx/nginx.conf

          az webapp deploy \
            -g 3380_Resources -n medconnect \
            --type static \
            --src-path nginx/startup.sh \
            --target-path nginx/startup.sh

          # Set startup command and restart
          az webapp config set \
            -g 3380_Resources -n medconnect \
            --startup-file "/bin/sh /home/site/wwwroot/nginx/startup.sh"

          az webapp restart -g 3380_Resources -n medconnect
