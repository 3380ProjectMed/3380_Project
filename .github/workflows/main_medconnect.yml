# .github/workflows/main_medconnect.yaml
name: Build and deploy full-stack (React + PHP) app to Azure Web App - medconnect

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # ---------- Build React ----------
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Build React app
        working-directory: frontend/medical-app
        run: |
          npm ci
          npm run build

      # ---------- Prepare webroot (what will become /home/site/wwwroot) ----------
      - name: Stage webroot
        run: |
          set -e
          WEBROOT="release/wwwroot"
          mkdir -p "$WEBROOT"

          # 1) React build output -> webroot
          cp -r frontend/medical-app/dist/* "$WEBROOT/"

          # 2) PHP API + helper files -> webroot
          mkdir -p "$WEBROOT/api"
          # Copy EVERYTHING under backend/public/api (nested folders, hidden files)
          if [ -d backend/public/api ]; then
            cp -R backend/public/api/. "$WEBROOT/api/"
          fi
          # (Optional legacy path)
          if [ -d backend/api ]; then
            cp -R backend/api/. "$WEBROOT/api/"
          fi

          # Copy CORS helper to webroot
          if [ -f backend/public/cors.php ]; then
            cp backend/public/cors.php "$WEBROOT/"
          elif [ -f backend/cors.php ]; then
            cp backend/cors.php "$WEBROOT/"
          fi

          # Other PHP folders if you use them
          [ -d backend/public/doctor_api ] && cp -R backend/public/doctor_api "$WEBROOT/" || true
          [ -d backend/public/patient_api ] && cp -R backend/public/patient_api "$WEBROOT/" || true

          # 3) Apache routing for SPA + API (Linux ignores web.config)
          if [ -f backend/public/.htaccess ]; then
            cp backend/public/.htaccess "$WEBROOT/.htaccess"
          elif [ -f backend/.htaccess ]; then
            cp backend/.htaccess "$WEBROOT/.htaccess"
          else
            cat > "$WEBROOT/.htaccess" <<'HT'
            RewriteEngine On
            # Serve existing files/dirs as-is
            RewriteCond %{REQUEST_FILENAME} -f [OR]
            RewriteCond %{REQUEST_FILENAME} -d
            RewriteRule ^ - [L]
            # API folders stay out of SPA fallback (matches nested paths too)
            RewriteRule ^api/(.*)$ api/$1 [L,QSA]
            RewriteRule ^doctor_api/(.*)$ doctor_api/$1 [L,QSA]
            RewriteRule ^patient_api/(.*)$ patient_api/$1 [L,QSA]
            # Everything else -> React SPA
            RewriteRule ^ index.html [L]
            HT
          fi

          # Normalize line endings just in case
          command -v dos2unix >/dev/null 2>&1 && dos2unix "$WEBROOT/.htaccess" || true

          # Remove Azure splash if ever present
          rm -f "$WEBROOT/hostingstart.html" 2>/dev/null || true
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Run composer install if composer.json exists (backend/)
        id: composer_check
        run: |
          if [ -f backend/composer.json ]; then
            echo "has_composer=true" >> $GITHUB_OUTPUT
          else
            echo "has_composer=false" >> $GITHUB_OUTPUT
          fi

      - name: Composer install
        if: steps.composer_check.outputs.has_composer == 'true'
        working-directory: backend
        run: |
          composer validate --no-check-publish
          composer install --prefer-dist --no-progress --no-dev
          # Put vendor/ where your PHP expects it; example below copies to webroot if needed
          cp -r vendor ../release/wwwroot/vendor

      # ---------- Upload artifact ----------
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: webroot
          path: release/wwwroot

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: webroot
          path: webroot

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_82C758B8091545CFB8269C41B30856D8 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_4358F78E127A4B5A97B0559118392A2C }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_904AB161F72245F0BD8DB8A2CDD5D2FB }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'medconnect'
          slot-name: 'Production'
          package: webroot
